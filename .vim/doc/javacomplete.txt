*javacomplete.txt*	For Vim version 7.0 and above. Last change: 2007 Aug 4

		    JAVACOMPLETE REFERENCE MANUAL	by cheng fang~
		    					fangread@yahoo.com.cn~


1. Overview					|javacomplete-overview|
   1.1 Features					|javacomplete-features|
   1.2 Requirements				|javacomplete-requirements|
   1.3 Download					|javacomplete-download|
   1.4 Install					|javacomplete-install|
2. Usage    					|javacomplete-usage|
   2.1 Input contexts				|javacomplete-contexts|
   2.2 Options					|javacomplete-options|
   2.3 Commands					|javacomplete-commands|
3. Java parser in Vim    			|javacomplete-parser|
   3.1 Abstract Syntax Tree			|javacomplete-ast|
   3.2 Global Constants				|javacomplete-constants|
   3.3 Parsing Functions			|javacomplete-functions|
   3.4 Sample					|javacomplete-sample|
4. FAQ						|javacomplete-faq|
5. Limitations					|javacomplete-limitations|
6. History					
   6.1 javacomplete				|javacomplete-history|
   6.2 Parser					|java-parser-history|
   6.2 Reflection.java				|javacomplete-reflection|
7. Todo						|javacomplete-todo|
8. Thanks					|javacomplete-thanks|

==============================================================================
1. Overview 					*javacomplete-overview*

This is javacomplete, an omni-completion script of JAVA language for vim 7.
It includes javacomplete.vim, java_parser.vim, Reflection.java, and 
javacomplete.txt

To use this plugin, make sure ftplugins are enabled, via "filetype plugin on".
Filetype detection will set the omnifunction appropriately.

1.1 Features					*javacomplete-features*

- List members of a class, such as (static) fields, (static) methods.
- List classes or subpackages of a package.
- Provide parameters information of a method, list all overload methods.
- Complete an incomplete field or method name.
- Provide a complete JAVA parser written in Vim script language.
- Use the JVM to obtain most information.
- Use the embedded parser to obtain the class information of source files.
- Builtin objects in JSP can be recognized, such as request, session.

1.2 Requirements				*javacomplete-requirements*

It works on all the platforms where
- Vim version 7.0 and above.
- JDK version 1.1 and above. 

1.3 Download					*javacomplete-download*

You can download the lastest version from this url:
	http://www.vim.org/scripts/script.php?script_id=1785

1.4 Install					*javacomplete-install*

1. Unzip javacomplete.zip to an autoload directory, e.g. $VIM/vimfiles/autoload
   Move javacomplete.txt to help directory, e.g. $VIM/vimfiles/doc.

2. Set 'omnifunc' option. e.g.
	set omnifunc=javacomplete#Complete
   You can add this command in a ftplugin script like ftplugin/java_xxx.vim.
   Or, use autocmd: >
	" Only do this part when compiled with support for autocommands.
	if has("autocmd")
	  autocmd Filetype java setlocal omnifunc=javacomplete#Complete
	endif

==============================================================================
2. Usage    					*javacomplete-usage*

You can use it like other omni-completion script. Many samples of input context 
are gived in the following section.

Reflection.java will be automatcally compiled and placed to $HOME when you use
first time. Assure that Reflection.java is in the same directory with
javacomplete.vim to be searched in autoload subdirectory of &rtp. If no
Reflection.class is generated, check that you have the write permission in
$HOME directory.

If no JVM launcher (default 'java') can be searched in the PATH enviroment 
variable, Use javacomplete#SetJVMLauncher() to specify one. See option 
`javacomplete-launcher`.

See FAQ in time if some problem occurs.

2.1 Input contexts				|javacomplete-contexts|
Note that '|' indicates cursor position
   (1). after '.', to get the member list of a class or a package.
	- package.| 		sub packages and classes in 'package'
	- Type.| 		static members of the 'Type' class
	- var.|			members of var
	- method().| 		members of method() result
	- this.|		members of the current class
	- ClassName.this.|	members of an outer class
	- super.|		members of the super class
	- array[i].|		members of the element in the array
	- array.|		members of an Array object
	- "String".|		members of the String class
	- int.|	 or void.|	"class"

   (2). after '(', or between '(' and ')', to get the list of methods matched with parameter information. It's better to provide javadoc.
	- method(|) 	methods matched
	- new Class(|) 	constructors matched

   (3). after an incomplette word, to provide a candidates matched for selection.
	- var.ab| 	subset of members of var begining with 'ab'
	- ab		list of all maybes

   (4). import statement
	- " import 	java.util.|"
	- " import 	java.ut|"
	- " import 	ja|"
	- " import 	java.lang.ThreadLocal.|"
	Many products do not implements case 4, including eclipse, jcreator.

   The above are in simple expression.
   (5). after compound expression:
	- boolean.class.|
	- compound_expr.var.|
	- compound_expr.method().|
	- compound_expr.method(|)
	- compound_expr.var.ab|
	e.g.
	- "java.lang	. System.in .|"
	- "java.lang.System.getenv().|"

   (6). Nested expression:
	- "System.out.println( str.| )"
	- "System.out.println(str.charAt(| )"
	- "for (int i = 0; i < str.|; i++)"
	- "for ( Object o : a.getCollect| )"


2.2 Options					*javacomplete-options*

1. Set java compiler (default 'javac') using the following function:
	javacomplete#SetCompiler('javac')	*javacomplete-compiler*

2. Set java launcher (default 'java') using the following function:
	javacomplete#SetJVMLauncher('java')	*javacomplete-launcher*

3. Set classpath using the following function:
	javacomplete#AddClassPath('jarfile_or_classes_path')
	javacomplete#DelClassPath('jarfile_or_classes_path')
	javacomplete#SetClassPath('semicolon_separated_string')

    Another two variables will be used if they are existing:
	|g:java_classpath|	global classpath
	|b:classpath|		associated with current buffer
    In one sense, s:classpath is like a classpath option for a PROJECT.
    If some of them are body set, the priority of these variables is:
	first,  b:classpath first,
	second, s:classpath
	third,  g:java_classpath
	last,   $CLASSPATH

4. Set sourcepath using the following function: >
	javacomplete#AddSourcePath('sources_file_path')
	javacomplete#DelSourcePath('sources_file_path')
	javacomplete#SetSourcePath('sources_file_path')

5. Set using JDK1.1 option if you meet the problem described in FAQ 3: >
	javacomplete#UseJDK11()


2.3 Commands					*javacomplete-commands*

==============================================================================
3. Java parser in Vim    			*javacomplete-parser*

3.1 Abstract Syntax Tree			*javacomplete-ast*

3.2 Global Constants				*javacomplete-constants*

3.3 Parsing Functions				*javacomplete-functions*

3.4 Sample Codes					*javacomplete-sample*
This parser can be a good candidate for anyone who needs a java parser to get 
a abstract syntax tree for many use. The following are sample codes: >

  " NOTE: The script contains a single parser instance. You cannot create 
  " another parser! The only way to parse another JAVA code is reset the
  " parser by calling java_parser#InitParser().

  " 1. Initialize the parser
  " for a code snippet,
  call java_parser#InitParser(['for (int i = 0; i < N; i++) {', '', '}'])
  " or for the current buffer,
  call java_parser#InitParser(getline('^', '$'))
  " or for a whole source file
  call java_parser#InitParser(readfile('java/util/Arrays.java'))

  " 2. Get the result tree
  call java_parser#compilationUnit()
  " or others according to the input code
  call java_parser#expression()
  call java_parser#block()
  call java_parser#statement()

  " 3. Use the tree as you like

  " 4. The default scan strategy is scanning only sklenton. 
  " You can change it by set the option 'scanStrategy'.
  " The values for 'scanStrategy' option are:
  "	0 - only class members when parse full file; 
  "	1 - keep statement as a whole string; 
  "	2 - all 
  call java_parser#InitParser(getline('^', '$'), {'scanStrategy': 2})

  " 5. I recommend that keeping scanStrategy as default. 
  " If you want to parse a code snippet such as a method body of the whole
  " file, you can call java_parser#GotoPosition() to go to what you are going 
  " to start parsing.
  " Then, call java_parser#block(), java_parser#statement() or 
  " java_parser#expression() to parse the smaller snippet.
  " NOTE: This way will keep the result tree reserved.
  call java_parser#GotoPosition(def.body.pos)
  call java_parser#block()

==============================================================================
4. FAQ						*javacomplete-faq*

(1). When you meets the following problem: >
	omni-completion error: Exception in thread "main" 
	java.lang.NoClassDefFoundError: Reflection
It is Reflection.class not found in autoload directory or $HOME that cause
this problem.
There are several reasons causing this problem:
    o	No compiler. Use javacomplete#SetCompiler() to specify one.
    o	No write permission for $HOME directory.

(2). Reflection.java should be searched in autoload subdirectory of &rtp.
Reflection.class should be searched in $HOME or autoload subdirectory of &rtp.
If not found, javacomplete try to compile it and place the generated class
file in $HOME.

(3). A error for using JDK1.1:
    Unable to initialize threads: cannot find class java/lang/Thread
When I tested JDK1.1.8 on my Windows XP, I met it. And I found it is
-classpath that cause it. So, a way to avoid it is:
    o	Add Reflection.class and others to the CLASSPATH enviroment variable.
    o	And call javacomplete#UseJDK11() to set option.

==============================================================================
5. Limitations					*javacomplete-limitations*

The embedded parser works a bit slower than expected.

==============================================================================
6. History					*javacomplete-history*

6.1 javacomplete				*javacomplete-history*
v0.76 2007-08-04
    2007-08-04
    -	Fix a infinite loop bug in s:GetMatchedIndexEx()
    -	Fix that array type not recognised in compound expression.
    -	Add a option for JDK1.1. See FAQ 3.
    2007-08-03
    -	Improve for 'this' or 'super'.
    -	Support searching toplevel class in sourcepath.
    -	Clean
    2007-08-02  
    -	Improve the process of checking a class in one of packages.
    2007-08-01
    -	Add Searchdecl() using java_parser.vim to provide quick information.
    -	Supports input context: "StringLiteral".|, "int.|", "void.|"
    2007-07-28
    -	Automatcally compile Reflection.java and place it to $HOME.
    -	Add option 'javacompiler', default 'javac'
    -	Add option 'java', default 'java'

v0.75 2007-02-13
    -	Add java_parser.vim.
    -	Add b:sourcepath option.
    -	Improve recognition of classes defined in current buffer or in source path.
    -	Support generating class information from tags instead of returning list directly.

v0.74 2007-02-03
    -	Support jre1.2 (and above).
    -	Support input context like "boolean.class.|"
    -	Handle java primitive types like 'int'.

v0.73 2007-02-01
    -	Fix bug that CLASSPATH not used when b:classpath or g:java_classpath not set.
    -	Fix bug that call filter() without making a copy for incomplete.
    -	Improve recognition of declaration of this class

v0.72 2007-01-31	Handle nested expression.
v0.71 2007-01-28	Add Basic support for class in current folder.
v0.70 2007-01-27	Complete the reflection part.
v0.60 2007-01-25	Design TClassInfo, etc.
v0.50 2007-01-21	Use java and Reflection.class directly.


6.2 Parser					*java-parser-history*

v0.61 2007-08-04
    2007-08-01 Fix a bug typetag(). return a:token -> return tolower(a:token)
    2007-07-31
    -	Rename all script functions matching "s:Java_\(\i\+\)" to "s:\1".
    -	Change s:EOI = ''
    -	Use get() instead of s:GetOption(). Remove it.
    -	Use repeat() instead of s:PrependChar(). Remove it.
    -	Improve scanChar()

v0.60 2007-07-31	Now it nearly is a complete parser and support Java5,6.
			And tested correctly on all java files in jdk6 src.zip.
    2007-07-19	Support new language features in java 5 and above.
    2007-07-25	Add supports for parsing statement, block or expression
    2007-07-28	Place it to autoload directory. 
    2007-07-30	Clean this script.

v0.51 2007-02-13	Optimize several scan function.
v0.50 2007-02-10	Complete the skeleton.


6.3 Reflection.java			*javacomplete-reflection*

v0.76
    2007-08-04	Add check and read package content for '-E'.
    2007-08-02
    -	Add an option '-E'.
    -	Use ZipFile and ZipEntry instead of JarFile and JarEntry,
	so that it can be compiled by and run on JDK1.1 and above.
v0.7  2007-02-17	

==============================================================================
7. Todo						*javacomplete-todo*

-  Add javadoc
-  Give parameter information not just after '('.
-  Support parameter information for template
-  Give a hint for class name conflict in different packages.
-  Add quick information using balloonexpr, ballooneval, balloondelay.
-  Improve performance of the embedded parser.
-  Support fields in base class(es).

==============================================================================
8. Thanks					*javacomplete-thanks*
        * Bram Moolenaar and all Vim contributors for Vim
        * The insenvim project
        * The javac and gjc sources
        * All of you for using this script :)

        * For help, documentation, bug report :

FeedBack:
Any problem, bug or suggest are welcome to send to fangread@yahoo.com.cn

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
